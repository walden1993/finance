package com.sp2p.service;import java.sql.Connection;import java.sql.SQLException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.shove.base.BaseService;import com.shove.base.CommonService;import com.shove.data.ConnectionManager;import com.shove.data.DataException;import com.shove.data.dao.MySQL;import com.shove.vo.PageBean;import com.sp2p.dao.RecommendUserDao;public class RecommendUserService extends CommonService {	public static Log log = LogFactory.getLog(RecommendUserService.class);	private RecommendUserDao recommendUserDao;	private ConnectionManager connectionManager;	/**	 * 添加用户和推荐人关系	 * 	 * @param conn	 * @param userId	 * @param recommendUserId	 * @return Long	 * @throws Exception	 */	public Long addRecommendUser(long userId, long recommendUserId)			throws Exception {		Connection conn = MySQL.getConnection();		Long id = -1L;		try {			id = recommendUserDao.addRecommendUser(conn, userId,					recommendUserId);			conn.commit();		} catch (SQLException e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}		return id;	}	/**	 * 修改用户和推荐人关系	 * 	 * @param conn	 * @param id	 * @param vouchersId	 * @return Long	 * @throws Exception	 */	public Long updateRecommendUser(long id, long moneyTypeId) throws Exception {		Connection conn = MySQL.getConnection();		Long returnId = -1L;		try {			returnId = recommendUserDao.updateRecommendUser(conn, id,					moneyTypeId);			conn.commit();		} catch (SQLException e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}		return returnId;	}	/**	 * 根据条件查询数据	 * 	 * @param conn	 * @param id编号	 * @param userId用户编号	 * @param recommendUserId推荐人编号	 * @param vouchersId礼劵编号	 * @return List<Map<String,Object>>	 * @throws DataException	 * @throws Exception	 */	public List<Map<String, Object>> queryRecommendUser(Long id, Long userId,			Long recommendUserId) throws Exception, DataException {		Connection conn = MySQL.getConnection();		List<Map<String, Object>> list = null;		try {			list = recommendUserDao.queryRecommendUser(conn, id, userId,					recommendUserId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return list;	}	/**	 * 根据邀请人Id查询所有被邀请人	 * 	 * @param recommendId	 * @return	 * @throws Exception	 * @throws DataException	 */	public List<Map<String, Object>> findRecommendUserByRecommendId(			Long recommendId) throws Exception {		Connection conn = MySQL.getConnection();		List<Map<String, Object>> list = null;		try {			list = recommendUserDao.findRecommendUserByRecommendId(conn,					recommendId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}		return list;	}	/**	 * 分页查询邀请好友列表	 * 	 * @param recommendId	 * @throws Exception	 * @throws DataException	 */	public void queryfindRecommendUserPage(PageBean pageBean, Long recommendId)			throws Exception {		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_t_recommendfriend_list", "*", "",					"AND recommendUserId=" + recommendId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}	}	/**	 * 根据用户Id查询邀请人Id	 */	public Map<String, String> getRecommendUserByuserId(Long userId)			throws Exception {		Connection conn = MySQL.getConnection();		Map<String, String> map = null;		try {			map = recommendUserDao.getRecommendUserByuserId(conn, userId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}		return map;	}		/**	 * 分页查询邀请好友列表	 * 	 * @param recommendId	 * @throws Exception	 * @throws DataException	 */	public Map<String, String> queryRecommendUserInfo(Long recommendId)			throws Exception {		Map<String, String> map = null;		Connection conn = MySQL.getConnection();		try {			map = recommendUserDao.queryFriendExistInfo(conn, recommendId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return map;	}			public Map<String, String> queryFriendCost() throws Exception {		Map<String, String> map = null;		Connection conn = MySQL.getConnection();		try {			map = recommendUserDao.queryFriendCost(conn);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return map;	}		/**	 *功能：更新推荐人	 * @param userName	 * @return	 * @throws Exception	 */	public Map<String, String> fillRecomment(Long userId, String userName) throws Exception {		Map map = null;		Connection conn = MySQL.getConnection();		Long recommentId = 0L;		try {			//查询是否有该用户			map = recommendUserDao.queryFriendExist(conn, userName);			if (null == map){				map = new HashMap();				map.put("ret", "0");				return map;			}						//查询该用户是否写了自己的下线做推荐人//			Map fm = recommendUserDao.queryFriendCircle(conn,userId,userName);//			if (null != fm){//				map = new HashMap();//				map.put("ret", "2");//				return map;//			}						//推荐人的ID一定比自己的ID小			String retId = (String) map.get("id");			if (userId <= Integer.parseInt(retId)){				map = new HashMap();				map.put("ret", "2");				return map;			}			//不能都是内部员工 SELECT COUNT(1) ct FROM t_employee a WHERE a.userId IN(1,2) AND a.hasWork=1			Map a = recommendUserDao.queryEmployeeBoth(conn, userId, Long.parseLong(retId));			if ("2".equals(a.get("ct"))){				map = new HashMap();				map.put("ret", "3");				return map;			}						recommentId = Long.parseLong((String) map.get("id"));						//更新用户			recommendUserDao.addRecommendUser(conn,userId,recommentId);			map.put("ret", "1");		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.commit();			conn.close();		}		return map;	}		/**	 *功能：下线投资求和	 * @param userId	 * @return	 * @throws Exception	 */	public Map<String, String> sumInvestAmt(Long userId) throws Exception{		Map<String, String> map = null;		Connection conn = MySQL.getConnection();		try {			map = recommendUserDao.sumInvestAmt(conn, userId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return map;	}		/**	 *功能：检查推荐人是否存在	 * @return	 * @throws Exception 	 */	public int checkRecomment(Long userId, String userName) throws Exception{		Connection conn = MySQL.getConnection();		int retIdi=0;		try {			//查询是否有该用户			Map map = recommendUserDao.queryFriendExist(conn, userName);			//如果用户不存在，则返回0			if (null == map){				return 0;			}						//推荐人的ID一定比自己的ID小			String retId = (String) map.get("id");			retIdi = Integer.parseInt(retId);			//推荐人的ID一定比自己的ID大，则返回2			if (userId <= Integer.parseInt(retId)){				return -1;			}						//如果已经有了，则不能再填 			Map rdMap = recommendUserDao.getRecommendUserByuserId(conn, userId);			if (null != rdMap){				return -2;			}					} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.commit();			conn.close();		}				//正常情况（系统存在该推荐人），返回1		return retIdi;	}		public RecommendUserDao getRecommendUserDao() {		return recommendUserDao;	}	public void setRecommendUserDao(RecommendUserDao recommendUserDao) {		this.recommendUserDao = recommendUserDao;	}	public ConnectionManager getConnectionManager() {		return connectionManager;	}	public void setConnectionManager(ConnectionManager connectionManager) {		this.connectionManager = connectionManager;	}}