package com.sp2p.dao;import java.sql.Connection;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringEscapeUtils;import com.shove.data.DataException;import com.shove.data.DataSet;import com.shove.util.BeanMapUtils;import com.sp2p.database.Dao;import com.sp2p.database.Dao.Tables;import com.sp2p.database.Dao.Tables.t_platform_cost;import com.sp2p.database.Dao.Tables.t_user;public class RecommendUserDao {	/**	 * 添加用户和推荐人关系	 * @param conn	 * @param userId	 * @param recommendUserId	 * @return	 * @throws SQLException	 */	public Long addRecommendUser(Connection conn,long userId,long recommendUserId) throws SQLException{		Dao.Tables.t_recommend_user recommendUser = new Dao().new Tables().new t_recommend_user();		recommendUser.userId.setValue(userId);		recommendUser.recommendUserId.setValue(recommendUserId);		return recommendUser.insert(conn);	}		/**	 * 修改用户和推荐人的奖励	 * 	 * @param conn	 * @param id	 * @param vouchersId	 * @return	 * @throws SQLException	 */	public Long updateRecommendUser(Connection conn,long id ,long moneyTypeId) throws SQLException{		Dao.Tables.t_recommend_user recommendUser = new Dao().new Tables().new t_recommend_user();		recommendUser.moneyTypeId.setValue(moneyTypeId);				return recommendUser.update(conn, " id="+id);	}		/**	 * 根据条件查询数据	 * @param conn	 * @param id编号	 * @param userId用户编号	 * @param recommendUserId推荐人编号	 * @param vouchersId礼劵编号	 * @return	 * @throws DataException 	 * @throws SQLException 	 */	public List<Map<String,Object>> queryRecommendUser(Connection conn,Long id,Long userId,Long recommendUserId) throws SQLException, DataException{		StringBuffer condition = new StringBuffer();		condition.append(" 1=1 ");		if(id!=null&&id>0){			condition.append(" AND id= "+id);		} 		if(userId!=null&&userId>0){			condition.append(" AND userId= "+userId);		} 		if(recommendUserId!=null&&recommendUserId>0){			condition.append(" AND recommendUserId= "+recommendUserId);		} 		Dao.Tables.t_recommend_user recommendUser = new Dao().new Tables().new t_recommend_user();		DataSet dataSet = recommendUser.open(conn, "*", condition.toString(), "", -1, -1);		dataSet.tables.get(0).rows.genRowsMap();		condition = null;		return dataSet.tables.get(0).rows.rowsMap;	}			//根据邀请人Id查询所有被邀请人	public List<Map<String, Object>> findRecommendUserByRecommendId(Connection conn,Long recommendId)throws SQLException,DataException{		Dao.Views.v_t_recommendfriend_list friendList=new Dao().new Views().new v_t_recommendfriend_list();			DataSet dataSet=friendList.open(conn, "", "recommendUserId="+recommendId, "", -1, -1);			dataSet.tables.get(0).rows.genRowsMap();			return dataSet.tables.get(0).rows.rowsMap;	}		//根据用户Id查询邀请人Id	public Map<String, String> getRecommendUserByuserId(Connection conn,Long userId)throws SQLException,DataException{		Dao.Tables.t_recommend_user recommendUser = new Dao().new Tables().new t_recommend_user();		DataSet dataSet = recommendUser.open(conn, "", "userId=" + userId, "", -1, -1);		return BeanMapUtils.dataSetToMap(dataSet);	}		public Map<String,String> queryFriendCost(Connection  conn) throws SQLException, DataException	{		Dao.Tables.t_platform_cost  t_platform_cost = new Dao().new Tables().new t_platform_cost();		DataSet  ds=t_platform_cost.open(conn, " * ", " id = 2", "", -1, -1);		return BeanMapUtils.dataSetToMap(ds);	}		/**	 *功能：查询是否存在该推荐人用户名	 * @param conn	 * @return	 * @throws SQLException	 * @throws DataException	 */	public Map<String,String> queryFriendExist(Connection  conn, String userName) throws SQLException, DataException	{		Dao.Tables.t_user user = new Dao().new Tables().new t_user();		userName=com.shove.web.Utility.filteSqlInfusion(userName);		DataSet dataSet = user.open(conn, " id,username ", " username = '" + StringEscapeUtils.escapeSql(userName) + "'", "",				-1, -1);		return BeanMapUtils.dataSetToMap(dataSet);	}		/**	 *功能：查询是否存在该推荐人用户名	 * @param conn	 * @return	 * @throws SQLException	 * @throws DataException	 */	public Map<String,String> queryFriendExistInfo(Connection  conn, Long recommendId) throws SQLException, DataException	{		Dao.Tables.t_user user = new Dao().new Tables().new t_user();//		userName=com.shove.web.Utility.filteSqlInfusion(userName);		DataSet dataSet = user.open(conn, " id,username ", "EXISTS (SELECT 1 FROM t_recommend_user b WHERE t_user.id = b.`recommendUserId` AND b.`userId`="+recommendId+")", "",				-1, -1);		return BeanMapUtils.dataSetToMap(dataSet);	}		/**	 *功能：查询是否存在循环好友	 * @param conn	 * @return	 * @throws SQLException	 * @throws DataException	 */	public Map<String,String> queryFriendCircle(Connection  conn, Long userId, String userName) throws SQLException, DataException	{		Dao.Tables.t_recommend_user user = new Dao().new Tables().new t_recommend_user();		userName=com.shove.web.Utility.filteSqlInfusion(userName);		DataSet dataSet = user.open(conn, " id ", " recommendUserId=" + userId + " AND userId =( SELECT b.id FROM t_user b WHERE b.username='" + userName + "')", "",				-1, -1);		return BeanMapUtils.dataSetToMap(dataSet);	}			/**	 *功能：查询是否存在循环好友	 * @param conn	 * @return	 * @throws SQLException	 * @throws DataException	 */	public Map<String,String> sumInvestAmt(Connection  conn, Long userId) throws SQLException, DataException	{		Dao.Tables.t_invest user = new Dao().new Tables().new t_invest();		DataSet dataSet = user.open(conn, " SUM(realAmount) investAmount ", " investor IN (SELECT userId FROM t_recommend_user  WHERE recommendUserId="+userId+")", "",				-1, -1);		return BeanMapUtils.dataSetToMap(dataSet);	}		/**	 *功能：查询是否存在循环好友	 * @param conn	 * @return	 * @throws SQLException	 * @throws DataException	 */	public Map<String,String> queryEmployeeBoth(Connection  conn, Long userId, Long redId) throws SQLException, DataException	{		Dao.Tables.t_employee e = new Dao().new Tables().new t_employee();		DataSet dataSet = e.open(conn, " COUNT(1) ct ", " userId IN("+userId+","+redId+") AND hasWork=1", "",				-1, -1);		return BeanMapUtils.dataSetToMap(dataSet);	}}